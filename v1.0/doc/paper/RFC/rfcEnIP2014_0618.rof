.\" .\"                         comments
.\" .(x t                       begin indexed item in index t
.\" .)x                         end index item
.\" .(z				begin floating keep
.\" .)z                         end floating keep
.\" .de                         define macro; see also ".."
.\" ..                          end macro
.\" .fi                         finish 
.\" .ip o 3n			e.g. A Bullet
.\" .ll n                       total line width==n
.\" .ls n                       line spacing==n
.\" .lp                         left block paragraph
.\" .m1 0v                      blank lines between top and header
.\" .m2 1v                      blank lines between header and body
.\" .m3 1v                      blank lines between body and footer
.\" .m4 0v                      blank lines between footer and bottom
.\" .na                         no alignment of right margin
.\" .nf                         no format
.\" .nh                         ??
.\" .nr fm 0                    ??
.\" .nr sf R                    ??  
.\" .nr so -3n                  Exdent section headers back to left margin
.\" .pl 58                      total page length
.\" .po 0n                      page offset
.\" .sh n x                     section header level n with title x
.\" .so file-name               include source file-name
.\" .sp n                       insert n spacing lines
.\" .uh x                       unnumbered .sh
.\" .ti x                       Title indent by x spaces
.\" .(x				begin table of contents entry
.\" .)x				end table of contents entry
.\" .xp				print table of contents
.\" .hl				horizontal line
.\" ================================================================
.\" Set up footer and basic page layout right away We don't set up
.\" the header until after we've started generating the first page.
.\".fo 'Enhanced IPv4'Expires December 2016'[Page %]'
.fo 'Enhanced IPv4''[Page %]'
.\" double spacing
.ls 1
.\" the header until after we've started generating the first page.
.\".ll 72 is line length 72
.\" Courier
.fam C
.\".ll 60
.pl 58
.\".m1 0v
.\".m2 1v
.\".m3 1v
.\".m4 0v
.\".po 7n
.de $0
.\"This next step does autoindexing!! Cool
.(x t
\\$2 \\$1
.)x
..
.\".na
.ad l
.\".nr LL 7i
.\".nr LT 4.2i
.nr NA
.nh
.lp
.nf
Network Working Group                                  W. Chimiak,S. Patton
Request for Comments: XXXX        Laboratory for Telecommunication Sciences
                                                           18 June 2014
.sp
.ce 3
.\"===== DRAFT ===== Version 1.8 18 June, 2014 ===== DRAFT =====
Enhanced IPv4:  IPv4 with 64 bit Address Space
.ce
.bi
.fi
.he 'Internet-Draft'Enhanced IP'18 June 2014'
.ba 3
.nr so -3n
.br
.lp
This memo defines an experimental protocol for the Internet community.
It provides information of an experimental IPv4 extension,
compatible with IPv4.  This memo does not specify an Internet
standard of any kind.  Discussion and suggestions for improvement
are requested.  Distribution of this memo is unlimited.
.br
.sh 1 "Summary"
.lp
This document is based on an article published February 2014 in IEEE
Computer magazine describing a solution to IPv4 address depletion,
Enhanced IP (EnIP) [1].  Some concepts will be repeated here for
clarity.  Source code, documentation, and demonstration virtual machines
can be found at the following site:
.lp
http://www.enhancedip.org
.lp
An EnIP address is two IPv4 addresses concatenated together.
It looks like this:
.ip
192.0.2.2.10.1.1.2
.lp
whereas an IPv6 address looks like this:
.ip
2001:0101:c000:0202:0a01:0102::0
.lp
IPv6 faces a number of challenges to reach global deployment.
Some systems administrators have complained because IPv6 addresses
are not easy to remember.  Also, IPv6 requires a complete upgrade
to the backbone of the network.  It requires repeering via BGP
on a large scale.  In contrast, EnIP packets can be sent over
IPv4 backbones without the need for repeering.  Upgrades to CPE
equipment (cable, DSL, fiber modems) are another challenge for IPv6.
EnIP also requires upgrades to CPE equipment.  There is a slight
advantage for EnIP because the EnIP CPE upgrade is much less complex.
In a demonstration system, a loadable kernel module is installed
without rebooting the CPE device.  The demonstration kernel module
is presently 364 lines of code.  This is simpler than the code
required to implement RFC 6204 (Basic Requirements for IPv6 Customer
Edge Routers).  The complexity of RFC 6204 is such that getting an
accurate count of the lines of code is difficult.
.lp
EnIP does not replace IPv4 but builds upon it to maximize
backward compatibility. As a demonstration, EnIP is
currently deployed via Internet 2, between two nodes at
the University of Maryland and the University of Delaware.
Applications such as ssh, http, and samba operate between
the two EnIP networks without modification of the software
or routers in the path.
.sh 1 "Introduction"
.lp
For various reasons, there is a large demand for IP
addresses.  It would be useful to have a unique address
for each Internet device to allow, if desired, that any
device could call another [2].  The Internet of Things
would also be able to make use of more routable addresses
if they were available.  Currently, this is not possible
with IPv4.  IPv6 has presented a potential solution to
this problem but has faced problems with global adoption.
Carrier Grade Network Address Translation and NAT (NAPT)
have provided the solution thus far.
.lp
Enhanced IP (EnIP) was designed to minimize impact on
core and border routers.  DHCP, ARP, and existing IPv4
routing protocols are compatible with EnIP.  By leveraging
private address space in a similar manner of IP4+4 [3],
EnIP increases available address space by a factor of
17.9 million [1] or 17.9 million new addresses for each
current routable IP address.
.lp
This could allow the reassignment of small segments of
unused address blocks in /8 networks to registries with
chronic shortages of IP addresses.
.lp
EnIP packets carry additional address bits and state
in an IP option, eliminating routing table updates like
IPv6. EnIP supports end-to-end connectivity, a shortcoming
of NAT, making it easier to implement mobile networks.
Host renumbering is also not required in EnIP as has been
the case with other 64-bit protocol proposals [3]. This
is a major topic of section 4.
.lp
Because current NATs are resource intensive, requiring
that state be maintained, this paper will call these NATs
NATs,  The stateless NAT used in EnIP will be called an
EnIP NAT.
.sh 2 "Protocol Transitions"
.lp
Several transitions in the Internet Protocol suite are discussed in the 
IEEE paper [1].  These transitions include Network Control Program
(NCP) to TCP/IP, the evolution of IPv4, and IPv6.  It also refers
to network address port translation (NAPT), usually called NAT [4]
Nat444 [5], Dual-Stack Lite [6], NAT64 [7] and  RFC 6144 [8].
.sh 2 "The Use of IP Options"
.lp
EnIP uses IP options to increase address space.
Over time, this fixed-length IP option would need to be
added to the fast path implementations available on core
routers [9].  Fast path implementations are discussed by
Hidell et. al. [10].  Fast path allows core routers to
optimize data paths to line cards based on table lookups.
The fast path does not usually process packets containing
IP options [9].  As a result, packets containing IP
options are forwarded to the slow path CPU for processing
and forwarding to the correct line card.
.lp
However, a very simple upgrade could be made to the core and 
border routers to process EnIP packets in the fast path
with the following simple pseudo code [1]:
.(b
\fBif (IgnoreOptions)
        \fBFastPathOperations();
else if (IP_Option_Present AND Option_Byte1 == 0X9A)
        FastPathOperations() ;
else
        SlowPathOperations()\fR ;
.)b
.lp
EnIP and IPv6 both require upgrades to the fast path implementations
of routers.  EnIP's fast path upgrade has four advantages:
.np
The EnIP upgrade is the pseudo code above, instead of a large code
base insertion.
.np
There is no equipment reconfiguration.
.np
Internet providers can independently upgrade their fast paths.
.np
Finally, there are no requirements to update the IPv4 routing tables.
.sh 2 "Contents of this Paper"
.lp
Section 3 describes EnIP.  Section 4 is the heart of
the paper, describing the mechanics of EnIP.  Section 5
describes the University of Maryland and University of
Delaware deployment. It also describes tests between
2 nodes using EnIP and using normal IPv4 and gives the
results of the tests. The final section contains some
concluding remarks.
.sh 1 "Introduction to EnIP (EnIP)"
.lp
EnIP increases IP address space while maintaining compatibility with
existing IPv4 implementations.  
Current EnIP implementations use IP option 26 to create a twelve
byte extension to the IP header.
.sh 2 "EnIP Addressing Example"
.lp
The EnIP extension contains four bytes of overhead, and
two four byte fields used as additional storage for the
EnIP source and destination addresses.  EnIP addresses are
written as two IPv4 addresses concatenated together. IPv6
and EnIP addressing schemes are shown below:
.TS
center tab(;) ;
lb l.
IPv6 address;2001:0101:c000:0202:0a01:0102::0
EnIP address;192.0.2.2.10.1.1.2
.lp
.TE
.lp
In the above EnIP address, 192.0.2.2 is a public IPv4 address called
the site address; the 10.1.1.2 address is called the host address.
The host address is always a private IPv4 address assigned to a host
behind a lightweight, stateless EnIP-enabled NAT. It is the private IPv4
address that identifies the host in the network behind that NAT and is
compatible with other normal IPv4 hosts.  The site address allows the
packet to traverse public networks because its IPv4 Source Host Number
(or source address) is 192.0.2.2, a fully routable IPv4 address.
.sh 2 "IPv4 Header with EnIP Option Header"
.lp
The IPv4 header supporting EnIP is shown in Figure 1.
It is an IPv4 header with additional option space
used as follows:
.(b
.ce 1
\fBFigure 1:  EnIP Header\fR
.ls 1
.nf
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1 |Version|  IHL  |Type of Service|          Total Length         |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2 |         Identification        |Flags|      Fragment Offset    |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
3 |  Time to Live |    Protocol   |         Header Checksum       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
4 |                Source Host Number                             |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
5 |              Destination Host Number                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
6 |   EnIP ID     |     EnIP ID   |E|E|                           |
  |    (0X9A)     | Option Length |S|D|         (Reserved)        |
  |               |               |P|P|                           |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
7 |                        \fBEnhanced Source Address\fR                |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
8 |                   \fBEnhanced Destination Address\fR                |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
.fi
.)b
.sh 3 "Fields of the EnIP Extension"
.lp
The fields
.TS
tab(;) ;
cb lb cb
lb1 l1 l.
Field;Bits;Description
=;=;=
Version;4;The Version field is identical
;; to IPv4's.
IHL;4;Internet Header Length is
;;identical to IPv4's and is set
;;to the length of the
;;EnIP header.
Type of Service;8;The ToS field is identical
;;to IPv4's.
Total Length;16;The Total Length field is
;;identical to that of IPv4
;;and is 32 octets.
Identification;16;The Identification field is
;;identical to IPv4's.
Flags;3;The Flags field is identical
;;to IPv4's.
Fragment Offset;13;The Fragment Offset field is
;;identical to IPv4's.
Time to Live;8;The Time to Live field is
;;identical to IPv4's.
Protocol;8;The Protocol field is identical
;;to IPv4's.
Header Checksum;16;The Header Checksum field is
;;to IPv4's.
=;=;=
;EnIP specific;
_;_;_
Source Host Number;32;The Source Host Number field
;;identifies the source host. The
;;EnIP use is described in section 4
Destination Host Number;32;The Destination Host Number field
;;identifies the destination host.
;;The EnIP use is described in
;;section 4
EnIP ID;8;The EnIP ID field equals to \f(CB0x9A\fP or
;;\f(CB1 00 11010\fP. It's meaning is given
;;at the end of this section.
EnIP Option Length;8;The EnIP Option Length field is
;;\f(CB12\fP octets
ESP;1;This selector determines if an
;;Enhanced Source Address is present
EDP;1;This selector determines if an
;;EnIP Destination Address is present
Reserved;14;\fIReserved for future use\fP
Enhanced Source Address ;32;This is the host address used by
;;EnIP. It is described in section 4
Enhanced Destination Address;32;This is the destination
;;host address used by EnIP.
;;It is described in section 4
.TE
.lp
\fBNOTE\fR: The protocol has 12 bytes of overhead per packet.
.lp
The meaning of the EnIP ID field,
.(c
\fB1 00 11010\fR (0x9A hexadecimal)
.)c
is as follows:
.lp
If an EnIP packet traverses a router and must be fragmented because
of a link with a smaller MTU, the copy bit ensures that fragments
include the 12 byte IP option header in all fragmented packets.
The rest of the bits and their meaning are shown in Table 1.
.(b
.TS
allbox center nokeep tab(;) ;
c s s
c c c
lb c l.
Meaning of \f(CB1 00 11010\fP the \fBEnIP ID\fR
\f(CB1\fP;\f(CB00\fP;\f(CB11010\fP (or 26 base 10)
\fBcopy bit\fP set;\fBClass\fP is \fBControl\fP;\fBOption\fP is a new value
.TE
.)b
.ce
\fBTable 1: EnIP Id Field Interpretation
.lp
Note that 26 is the IP option value used in the EnIP experiments.
.sh 1 "EnIP Operation"
.lp
The following scenarios describe the operation of EnIP. The scenarios
will show the NAT use case as well as the end to end
64 bit EnIP use case.
.sh 2 "IPv4 NAT Explanation using Figure 2"
.(b
.nf
+-----+                                            +-----+
| IP1 |                                            | IP2 |
+-----+                                            +-----+
10.1.1.1                                           10.3.3.1
                   192.0.2.1  192.0.2.2
                 +--+-+            +-+--+
+------+         | N1 |            | N2 |          +------+
| EIP1 |         +-+--+            +-+--+          | EIP2 |
+------+  10.1.1.254                 10.3.3.254    +------+
10.1.1.2                                           10.3.3.2
.fi
.(l
\fBEIP1 and EIP2:\fR machines supporting IPv4
               and Enhanced IPv4
\fBIP1 and IP2:\fR   machines supporting only IPv4
\fBN1 and N2:\fR     NAT and EnIPNAT/translator devices
.)l
.(c
\fBFigure 2 - Enhanced IP and Unenhanced IPv4\fR
.)c
.)b
.lp
This section shows how two nodes, without EnIP, can communicate.
More complete explanations are available in reference 1 [1].
.sh 3 "Typical Private IPv4 Host to a Typical Public IPv4 Host using NAT"
.lp
IP1 (10.1.1.1), a typical IPv4 host, wants to reach N2 (192.0.2.2)
(See Figure 3).  It uses NAT (as on Linux iptables) to masquerade as the
public IP address of N1 (192.0.2.1).  N1 sets up a port forwarding rule
for IP1 for return packets from N2.
.(b
.nf
          192.0.2.1                192.0.2.2
+-----+        +--+-+            +-+--+
| IP1 +--------+ N1 +------------+ N2 + 
+-----+        +-+--+            +--+-+
10.1.1.1
.fi
.(l
\fBIP1:\fR           machine supporting only IPv4
\fBN1 and N2:\fR     NAT and EnIPNAT/translator devices
.)l
.(c
\fBFigure 3 - Typical Private IPv4 Host to a
           Typical Public IPv4 Host NAT\fR
.)c
.)b
.sh 3 "Typical Private IPv4 Host to a Typical Private IPv4 Host using NAT"
.lp
The same IP1 (10.1.1.1) wants to reach tcp port 80 on IP2 (10.3.3.1),
another typical IPv4 host (see Figure 4). The packets from 10.1.1.1 use
NAT on N1 to masquerade as source IP address 192.0.2.1. At N2 (192.0.2.2),
the packets arrive.  There they have a NAT port forwarding rule setup
on N2 to map tcp port 80 on 192.0.2.2 to forward packets to the internal
host IP2 (10.3.3.1).
.(b
.nf
            192.0.2.1                192.0.2.2
+-----+          +--+-+            +-+--+        +-----+
| IP1 +----------+ N1 +------------+ N2 +--------+ IP2 |
+-----+          +-+--+            +-+--+        +-----+
10.1.1.1                                         10.3.3.1
.fi
.(l
\fBIP1 and IP2:\fR   machines supporting only IPv4
\fBN1 and N2:\fR     NAT and EnIP NAT/translator devices
.)l
.(c
\fBFigure 4 - Typical Private IPv4 Host to a
           Typical Private IPv4 Host using NAT\fR
.)c
.)b
.lp
So packets move from IP1 to N1, taking N1's address as the source
address and move to N2. N2 has a mapping to IP2 and sends the packet to
IP2.  When IP2 sends replies, the NATs used their table entries to send
the packet back to IP1, adjusting the addresses as necessary.
.sh 3 "Private EnIP Host to a Typical Public IPv4 Host NAT"
.lp
Suppose EIP1 (10.1.1.2) wants to reach N2 (192.0.2.2) as in
Figure 5. It is the same as an IPv4 node wanting to reach N2. So
the destination IP address EIP1 s used to communicate with N2
(192.0.2.2).  The NAT device (N1) uses IPv4 NAT to translate
the source of the packets to come from 192.0.2.1. EIP1 behaves
as though it is an IPv4 host. It is fully compatible with normal
IPv4 communications.
.(b
.nf
            192.0.2.1                192.0.2.2
+------+         +--+-+            +-+--+
| EIP1 +---------+ N1 +------------+ N2 |
+------+         +-+--+            +-+--+
10.1.1.2
.fi
.(l
\fBEIP1:\fR          machine supporting IPv4
               and Enhanced IPv4
\fBN1 and N2:\fR     NAT and EnIP NAT/translator devices
.)l
.(c
\fBFigure 5 - Private EnIP Host to a
           Typical Public IPv4 Host using NAT\fR
.)c
.)b
.sh 3 "Private EnIP Host to a Typical Private IPv4 Host using NAT"
.lp
EIP1 (10.1.1.2) initiates a tcp port 80 connection to
IP2 (10.3.3.1) (see Figure 6).  Packets from EIP1 reach
N1. As above, they are masqueraded as IPv4 address
192.0.2.1.  When the packets arrive at N2 (192.0.2.2)
from N1 (192.0.2.1), there is a port forwarding entry
for port 80 setup to send the packets to IP2 (10.3.3.1).
.(b
.nf
                                                   +-----+
                   192.0.2.1  192.0.2.2       +----+ IP2 |
                 +--+-+            +-+--+     |    +-----+
+------+    +----+ N1 +------------+ N2 +-----+    10.3.3.1
| EIP1 +----+    +-+--+            +-+--+
+------+ 
10.1.1.2                                      
.fi
.(l
\fBEIP1:\fR          machine supporting IPv4
               and Enhanced IPv4
\fBIP2:\fR           machine supporting only IPv4
\fBN1 and N2:\fR     NAT and EnIP NAT/translator devices
.)l
.(c
\fBFigure 6 - Private EnIP Host to a Typical
           Private IPv4 Host using NAT\fR
.)c
.)b
.hl
.(c
\fBIt is important to note that thus far
.)c
.(c
this paper has not demonstrated any usage of EnIP features,
.)c
.(c
just compatibility with current IPv4 implementations\fR
.)c
.hl
.sh 2 "Enhanced IPv4 Explanation using an Example Figure 7"
.lp
Suppose EIP1 wants to send packets to EIP2. Here both hosts are
running Enhanced IPv4 stacks and N1 and N2 support EnIP. Suppose
EIP1 knows the address of EIP2 is 192.0.2.2.10.3.3.2. EIP1 knows
its internal IP address of 10.1.1.2 but is not aware of the external
address of N1 (192.0.2.1). The following is done (see Figure 7):
.(b
.nf
                   192.0.2.1  192.0.2.2
                 +--+-+            +-+--+
          +------+ N1 +------------+ N2 +-------+
+------+  |      +-+--+            +-+--+       |  +------+
| EIP1 +--+  10.1.1.254              10.3.3.254 +--+ EIP2 |
+------+                                           +------+
10.1.1.2                                           10.3.3.2
.fi
.(l
\fBEIP1 and EIP2:\fR machines supporting IPv4
               and Enhanced IPv4
\fBN1 and N2:\fR     NAT and EnIP NAT/translator devices
.)l
.(c
\fBFigure 7 - Enhanced IP\fR
.)c
.)b
.sh 3 "EIP1 constructs the Packet"
.np
EIP1 sets the Source Host Number field (the source IPv4 address) to 10.1.1.2;
.np
The EnIP ID field is set to 0X9A. the ESP bit is zeroed in the EnIP
header.
.np
The Enhanced Source Address in the EnIP header is set to
all ones since an EnIP source address is not currently
present.
.np
The most significant 32 bits of the EnIP address is set
by storing 192.0.2.2 in the IPv4 Destination Host Number.
.np
The least significant 32 bits of the EnIP address is set by storing
10.3.3.2 in the EnIP Destination Address field.
.np
Finally, EIP1 sets the EDP bit to 1.
.sh 3 "EIP1 Transmits the Packet to N1"
.lp
The packet is routed to N1 using normal IPv4.  N1 does the following:
.np
It notes the EnIP option (0X9A)is present.
.np
N1 reads 10.1.1.2 from the IPv4 Source Host Number field and places that
in the Enhanced Source Address field.  This field no longer contains
255.255.255.255.
.np
N1 sets the ESP bit to 1
.np
N1 makes 192.0.2.1 the IPv4 Source Host Number.
.np
N1 recomputes the IP checksum of the new packet.  If the packet carries
TCP or UDP, it recomputes these checksums as they have also changed.
.sh 3 "Packet Arrives at N2 (192.0.2.2)"
.lp
When the packet Arrives at N2, N2 does the following:
.np
N2 identifies the packet as an EnIP packet (0X9A).
.np
It reads the Enhanced Destination Address, 10.3.3.2,
and places this value as the IP header's Destination Host Number.
.np
N2 zeroes the EDP bit and the Enhanced Destination Address to zero.
.np
It recomputes the IP checksum. If the packet carries TCP or
UDP, recomputes these checksums as they have changed as a result
of a change to the IP destination address.
.np
N2 sends the packet to EIP2.
.sh 3 "EIP2 Receives the Packet"
.lp
When the packet arrives at EIP2, EIP2 does
the following:
.np
It computes the source address of the packet.
The IPv4 Source Host Number (192.0.2.1) is concatenated
with the Enhanced source address (10.1.1.2)
The result is 192.0.2.1.10.1.1.2.
.np
The IPv4 Destination Host Number (address) is 10.3.3.2.
.sh 3 "EIP2 Transmits a Packet to EIP1"
.lp
To construct a packet from EIP2 to EIP1, EIP2 does the following:
.np
EIP2 sets the Option ID field to 0X9A.
.np
It takes the IPv4 Source Host Number from the incoming packet,
192.0.2.1, and sets it as the IPv4 Destination Host Number.
.np
It places the Enhanced Source Address (10.1.1.2)
in the Enhanced Destination Address field.
.np
EIP2 sets the EDP field to 1 and
the IPv4 Source Host Number to 10.3.3.2.
.np
It sets the Enhanced Source Address to all ones.
.np
It sets the ESP bit to 0.
.sh 3 "Packet Arrives at N2"
.lp
When the packet Arrives at N2, N2 does the following:
.np
It writes 10.3.3.2 in the Enhanced Source Address field.
.np
The ESP bit is set to 1.
.np
N2 writes 192.0.2.2 in the IPv4 Source Host Number field
and recomputes the IP checksum. If the packet carries TCP or UDP,
it recomputes these checksums as well.
.np
N2 sends the packet to N1 (192.0.2.1).
.sh 3 "Packet Arrives at N1"
.lp
When the packet arrives at N1, it does the following:
.np
N1 reads 10.1.1.2 from the Enhanced Destination Address
.np
It writes this value in the IPv4 Destination Host Number field.
.np
It zeroes the EDP bit and the Enhanced Destination Address field.
.np
N1 recomputes the IP checksum
and if the protocol is TCP or UDP, recomputes these checksums as
well.
.np
N1 sends the packet to EIP1.
.sh 2 "Upgrading Servers to Support EnIP"
.lp
In order to maintain backward compatibility with old IPv4
systems, it is important that the EnIP Source Address is
an allowed private address.  Otherwise, that address becomes a routable
address outside of an autonomous system and there is a potential for
routing ambiguity.
.lp
With a kernel modification to support EnIP, an existing server
deployed using an IPv4 address can be upgraded.  The example of a
TCP echo server [11] is shown in detail elsewhere [1].  However,
highlights are now presented here.
.lp
An echo server logs the source IP address of each data
packet with the \fIgetpeername\fR function. However, the length of
the IPv4 address structure returned is currently 16 bytes
for IPv4 (the size of a \fIstruct sockaddr_in\fR). For
IPv6 the size of \fIstruct sockaddr_in6\fR is 28 bytes.  As an
example of the Alpha implementation mentioned previously, EnIP
returns a new structure called \fIstruct sockaddr_ein\fR that is
26 bytes. It is necessary to use the length 26 to detect a \fIstruct
sockaddr_ein\fR. This new \fIstruct\fR has two values: sin addr1 and sin
addr2. These represent the IPv4 source address and the EnIP Source
Address. An implementation of \fIgetpeername\fR could provide a
compatibility mode to treat EnIP addresses as IPv4 addresses. Once
the echo client software is upgraded, the \fIgetpeername\fR
implementation could return \fIstruct sockaddr_ein\fR.
.sh 2 "DNS Operation"
.lp
RFC 2928 provides 2001:0101 as the experimental IPv6 prefix [12]. 
EnIP lookups can use already standardized AAAA records with this prefix.
This prefix uses 32 bits of the 128 bit AAAA record.
EnIP uses only 64 bits of the remaining 96 bits. If
192.0.2.2.10.1.1.2 is the EnIP address, the EnIP AAAA record
is 2001:0101:c000:0202:0a01:0102::0.
We call this an AA record. A new record type is not needed
and eliminates the need for DNS server software upgrades on a massive
scale.
.sh 2 "Information Security"
.lp
The same article shows the care taken to minimize changes in
IDS/Firewalls Operation.  It also addresses the prevention of EnIP
NAT or hosts from forwarding illegal packets, and its operation with
most of IPSEC, except in the full tunnel mode AH+ESP scenario.
.sh 1 "Tests and Comparisons of EnIP and Typical IPv4"
.lp
The IEEE Computer Magazine article describes the two-node EnIP test
deployment over the Internet 2 network with the EnIP NATs.
The tests, along with their results, are given that compare typical
IPv4 connections with EnIP connections [1].  EnIP was used across
7 routers on Internet 2 to demonstrate viability in environments
that need more addressing.
.lp
In brief, the test had a node at the University of Maryland running
the Linux 2.6.38 kernel with patches to include the EnIP alpha
code. Another similar node was setup at the University of
Delaware. Each had an EnIP NAT.  \fIhttp\fR, \fIsamba\fR, and
\fIssh\fR were used without modification with Enhanced IP DNS
calls used.
.lp
The results, in section 5.3 of the paper[1], show EnIP performance
gains over traditional NAT, as there are no hash table lookups,
as in NAT. It provided roughly a factor of 2 improvement.
.lp
EnIP has also had basic testing with a 4G Long Term Evolution (LTE)
simulator along with an Android phone.  However, these results have
not been compiled.
.sh 1 "Conclusion"
.lp
This RFC describes the operation of IPv4 using IP options,
called Enhanced IP or EnIP. EnIP provides a solution to IPv4
address scarcity.  Because the EnIP design criteria is to extend
IPv4 instead of replacing it, it reduces impact on routers and
information security mechanisms already in place.  The operation
of two EnIP nodes at the University of Maryland and the University
of Delaware, running http, samba, and ssh without modification of
the software or routers in the path demonstrates the feasibility
of EnIP on a small but realistic scale that spanned seven routers.
.lp
Tests were conducted and documented, that show expected performance
improvement over the old NAT currently used, and the new EnIP
NAT. It provided roughly a factor of 2 improvement [1].
.lp
.sh 1 "References"
.ip [1]
W. Chimiak, S. Patton, and S. Janansky, "Enhanced IP: IPv4 with 64-Bit
Addresses," IEEE Computer Magazine, Vol. 47, Issue 2, pp. 62 - 69 , Feb 2014.
.ip [2]
G. Lee, et al., "The Internet of Things - Concept and Problem Statement,"
draft-lee-iot-problem-statement-05 (work in progress), July 2012.
.ip [3]
Z. Turanyi and A. Valko, "IPv4+4," Proceedings of the 10th IEEE
International Conference on Network Protocols, 2002.
.ip [4]
T. E. Paul F. Tsuchiya, "Extending the ip Internet through address reuse,"
ACM SIGCOMM Computer Communication Review, vol. 23, pp. 16-33, Jan 1993.
.ip [5]
J. Yamaguchi, Y. Shirasaki, et al., "Nat444 addressing models,"
Request for Comments, draft-shirasaki-nat444-isp-shared-addr-08, Internet
Engineering Task Force, 2012.
.ip [6]
A. Durand, R. Droms, J. Woodyatt, and Y. Lee, "Dual-Stack Lite
Broadband Deployments Following IPv4 Exhaustion." RFC 6333
(Proposed Standard), Aug. 2011.
.ip [7]
 M. Bagnulo, P. Matthews, and I. van Beijnum, "Stateful NAT64: Network
Address and Protocol Translation from IPv6 Clients to IPv4 Servers." RFC
6146 (Proposed Standard), Apr. 2011.
.ip [8]
 F. Baker, X. Li, C. Bao, and K. Yin, "Framework for IPv4/IPv6
Translation." RFC 6144 (Informational), Apr. 2011.
.ip [9]
J. Aweya, "IP router architecture: An overview," tech. rep., University of
Virginia, 1999.
.ip [10]
M. Hidell, P. Sjodin, and O. Hagsand, "Router architectures:
Tutorial at Networking 2004." http://web.ict.kth.se/\\
~mahidell/pubs/networking04_tutorial_final.pdf.
.ip [11]
 J. Postel, "Echo Protocol." RFC 862 (Standard), May 1983.
.ip [12]
 R. Hinden, S. Deering, R. Fink, and T. Hain, "Initial IPv6 Sub-TLA
ID Assignments." RFC 2928 (Informational), Sept. 2000.
.sh 1 "Acknowledgments"
.lp
The author would like to thank Sam Patton for his
keen observations, inspiration and network progamming
for this work.
\." ==========================================================
\." this is here to change the footer on the Table of contents
\".fo 'EnIP Table of Contents''Expires December 2016'
.fo 'EnIP Table of Contents'''
\." ==========================================================
.sh 1 "Author's Addresses"
.sp
.nf
William J. Chimiak
Laboratory for Telecommunication Sciences
8080 Greenmead Drive
College Park, MD 20740
+1-301-422-5217
.sp
mailto:w.chimiak@ieee.org
.sp 2
.fi
.bp
.ce 1
\fBTable of contents\fR
.xp t
